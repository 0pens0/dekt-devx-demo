apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source-template
spec:
  params:
    - default: default
      name: serviceAccount
  revisionPath: .status.artifact.revision
  urlPath: .status.artifact.url
  ytt: |
    #@ load("@ytt:data", "data")

    #@ if hasattr(data.values.workload.spec.source, "git"):
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: source
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      interval: 1m0s
      url: #@ data.values.workload.spec.source.git.url
      ref: #@ data.values.workload.spec.source.git.ref
      gitImplementation: libgit2
      ignore: |
        !.git
    #@ end

    #@ if hasattr(data.values.workload.spec.source, "image"):
    apiVersion: source.apps.tanzu.vmware.com/v1alpha1
    kind: ImageRepository
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: source
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      serviceAccount: #@ data.values.params.serviceAccount
      interval: 1m0s
      image: #@ data.values.workload.spec.source.image
    #@ end
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kpack-template
spec:
  imagePath: .status.latestImage
  params:
    - default: default
      name: serviceAccount
    - default: default
      name: clusterBuilder
    - default: {}
      name: registry
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def workload_param(name):
    #@   if not hasattr(data.values.workload.spec, "params"):
    #@     return None
    #@   end
    #@   for p in data.values.workload.spec.params:
    #@     if p.name == name:
    #@       return p.value
    #@     end
    #@   end
    #@ end

    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: build
        #! TODO find a better syntax
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      tag: #@ data.values.params.registry.server + "/" + data.values.params.registry.repository + "/" + data.values.workload.metadata.name
      serviceAccount: #@ data.values.params.serviceAccount
      builder:
        kind: ClusterBuilder
        name: #@ data.values.params.clusterBuilder
      source:
        blob:
          url: #@ data.values.source.url
      build:
        #! TODO should we include all workload defined envs?
        env:
        - name: BP_OCI_SOURCE
          value: #@ data.values.source.revision
        #@ if/end workload_param("live-update"):
        - name: BP_LIVE_RELOAD_ENABLED
          value: 'true'
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: convention-template
spec:
  configPath: .status.template
  params:
    - default: default
      name: serviceAccount
  ytt: |-
    #@ load("@ytt:data", "data")

    #@ def workload_param(name):
    #@   if not hasattr(data.values.workload.spec, "params"):
    #@     return None
    #@   end
    #@   for p in data.values.workload.spec.params:
    #@     if p.name == name:
    #@       return p.value
    #@     end
    #@   end
    #@ end

    apiVersion: conventions.apps.tanzu.vmware.com/v1alpha1
    kind: PodIntent
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: intent
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      template:
        metadata:
          annotations:
            #@ if/end workload_param("debug"):
            apps.tanzu.vmware.com/debug: "true"
            #@ if/end workload_param("live-update"):
            apps.tanzu.vmware.com/live-update: "true"
            developer.conventions/target-containers: workload
          labels:
            app.kubernetes.io/component: run
            #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
            app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
            carto.run/workload-name: #@ data.values.workload.metadata.name
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          containers:
            - name: workload
              image: #@ data.values.image
              securityContext:
                runAsUser: 1000
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: deploy-template
spec:
  params:
    - default: default
      name: serviceAccount
  ytt: |
    #@ load("@ytt:data", "data")

    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: #@ data.values.workload.metadata.name
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      fetch:
        - inline:
            paths:
              config.yml: |
                ---
                apiVersion: kapp.k14s.io/v1alpha1
                kind: Config
                rebaseRules:
                  - path: [metadata, annotations, serving.knative.dev/creator]
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: &matchers
                      - apiVersionKindMatcher: {apiVersion: serving.knative.dev/v1, kind: Service}
                  - path: [metadata, annotations, serving.knative.dev/lastModifier]
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: *matchers
        - inline:
            pathsFrom:
            - configMapRef:
                name: #@ data.values.workload.metadata.name
      template:
        - ytt: {}
      deploy:
        - kapp: {}
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: config-template
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def delivery():
    apiVersion: serving.knative.dev/v1
    kind: Service
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      template: #@ data.values.config
    #@ end

    #@ def claims():
    #@ for s in data.values.workload.spec.serviceClaims:
    ---
    apiVersion: services.tanzu.vmware.com/v1alpha1
    kind: ResourceClaim
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      ref: #@ s.ref
    ---
    apiVersion: servicebinding.io/v1alpha3
    kind: ServiceBinding
    metadata:
      name: #@ data.values.workload.metadata.name + '-' + s.name
      labels:
        app.kubernetes.io/component: run
        #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
        #@ end
        carto.run/workload-name: #@ data.values.workload.metadata.name
    spec:
      name: #@ s.name
      service:
        apiVersion: services.tanzu.vmware.com/v1alpha1
        kind: ResourceClaim
        name: #@ data.values.workload.metadata.name + '-' + s.name
      workload:
        apiVersion: serving.knative.dev/v1
        kind: Service
        name: #@ data.values.workload.metadata.name
    #@ end
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
    data:
      delivery.yml: #@ yaml.encode(delivery())
      #@ if hasattr(data.values.workload.spec, "serviceClaims") and len(data.values.workload.spec.serviceClaims):
      serviceclaims.yml: #@ yaml.encode(claims())
      #@ end