apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: dekt-outerloop
spec:
#WORKLOADS MAPPING
  selector:
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: dekt-backend
#INPUTS (for gitops)
  params:
  - name: maven_repository_url
    value: https://repo.maven.apache.org/maven2
  - default: main
    name: gitops_branch
  - default: supplychain
    name: gitops_user_name
  - default: supplychain
    name: gitops_user_email
  - default: supplychain@cluster.local
    name: gitops_commit_message
  - default: ""
    name: gitops_ssh_secret
  resources:
#GET SOURCE
  - name: source-provider
    params:
    - name: serviceAccount
      value: default
    - name: gitImplementation
      value: go-git
    templateRef:
      kind: ClusterSourceTemplate
      name: source-template
#TEST SOURCE
  - name: source-tester
    sources:
    - name: source
      resource: source-provider
    templateRef:
      kind: ClusterSourceTemplate
      name: testing-pipeline
#SCAN SOURCE
  - name: source-scanner
    params:
    - default: scan-policy
      name: scanning_source_policy
    - default: blob-source-scan-template
      name: scanning_source_template
    sources:
    - name: source
      resource: source-tester
    templateRef:
      kind: ClusterSourceTemplate
      name: source-scanner-template
#BUILD IMAGE
  - name: image-builder
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        server: "YOUR_REGISTRY_SERVER"
        repository: "YOUR_STAGE_REPO"
    #use the default TBS image builder
    - default: default
      name: clusterBuilder
    sources:
    - name: source
      resource: source-scanner
    templateRef:
      kind: ClusterImageTemplate
      options:
      #building image from source using buildpacks
      - name: kpack-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: DoesNotExist
      #building image from docker files (choose wisely!)    
      - name: kaniko-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: Exists
#scan image
  - name: image-scanner
    images:
    - name: image
      resource: image-builder   
    params:
    - default: scan-policy
      name: scanning_image_policy
    - default: private-image-scan-template
      name: scanning_image_template
    templateRef:
      kind: ClusterImageTemplate
      name: image-scanner-template
  - images:
    - name: image
      resource: image-scanner
#apply pod convenstions
  - name: conventions
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterConfigTemplate
      name: convention-template
#bind to data services
  - name: service-binder
  - configs:
    - name: config
      resource: conventions
    templateRef:
      kind: ClusterConfigTemplate
      options:
      #bind to RabbitMQ instace, deployed on cluster
      - name: binder-tap
        selector:
          matchFields:
          - key: spec.workload.serviceClaims.ref[?(@.kind=="rabbitmq"]
      #bind to a PostgreSQL instance, deployed in RDS
      - name: binder-rds
        selector:
          matchFields:
          - key: spec.workload.serviceClaims.ref[?(@.kind=="postgres"]
#create Deliverable
  - name: deliverable
    params:
    - name: registry
      value:
        ca_cert_data: ""
        server: "YOUR_REGISTRY_SERVER"
        repository: "YOUR_STAGE_REPO"
    templateRef:
      kind: ClusterTemplate
      name: deliverable-template
#deploy application
  - configs:
    - name: config
      resource: bind-services
    name: deploy-app
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        server: "YOUR_REGISTRY_SERVER"
        repository: "YOUR_STAGE_REPO"
    templateRef:
      kind: ClusterTemplate
      name: config-writer-template
